apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-service
  namespace: ml-production
  labels:
    app.kubernetes.io/name: ml-service
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: ml-platform
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ml-service
      component: api
  template:
    metadata:
      labels:
        app: ml-service
        component: api
        version: "1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ml-service-sa
      imagePullSecrets:
        - name: docker-registry-secret
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: ml-service
        image: ml-service:latest  # Should use specific version tags
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: ML_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: ML_ENVIRONMENT
        - name: ML_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: ML_LOG_LEVEL
        - name: ML_WORKERS
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: ML_WORKERS
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: DATABASE_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-secret
              key: JWT_SECRET
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: REDIS_URL
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: KAFKA_BOOTSTRAP_SERVERS
        volumeMounts:
        - name: ml-models
          mountPath: /data/models
        - name: ml-cache
          mountPath: /data/cache
        - name: ml-logs
          mountPath: /var/log/ml-service
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: ml-models
        persistentVolumeClaim:
          claimName: ml-models-pvc
      - name: ml-cache
        emptyDir:
          sizeLimit: 5Gi
      - name: ml-logs
        emptyDir:
          sizeLimit: 1Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ml-service
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300