[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "customer-churn-predictor"
version = "1.0.0"
description = "Production-ready ML system for customer churn prediction with comprehensive MLOps practices"
readme = "README.md"
authors = [{name = "Customer Churn Team", email = "team@example.com"}]
license = {text = "Apache-2.0"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.12"
dependencies = [
    "pandas>=2.3.0",
    "scikit-learn>=1.7.0",
    "numpy>=2.3.1",
    "mlflow>=3.1.0",
    "joblib>=1.5.1",
    "typer>=0.16.0",
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
    "redis>=5.0.1",
    "PyYAML>=6.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.6.3",
    "pytest-mock>=3.14.0",
    "black>=24.8.0",
    "flake8>=7.1.1",
    "mypy>=1.11.2",
    "httpx>=0.27.2",
    "pre-commit>=4.0.1",
    "safety>=3.2.8",
    "bandit>=1.7.10",
    "isort>=5.13.2",
    "coverage>=7.6.7",
    "locust>=2.31.8",
    "mutmut>=2.4.5",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.42",
    "mkdocs-mermaid2-plugin>=1.1.1",
]
test = [
    "postman-collection-runner>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/yourorg/customer-churn-predictor"
Documentation = "https://yourorg.github.io/customer-churn-predictor"
Repository = "https://github.com/yourorg/customer-churn-predictor"
Issues = "https://github.com/yourorg/customer-churn-predictor/issues"

[project.scripts]
churn-predictor = "src.cli:app"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
  | mlruns
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 88
extend-ignore = ['E203', 'W503', 'E501']
exclude = [
    '.git',
    '__pycache__',
    'build',
    'dist',
    '*.egg-info',
    '.venv',
    '.env',
    'mlruns',
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "8.0"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=json:coverage.json",
    "--cov-fail-under=85",
    "--cov-branch",
    "-ra",
    "--tb=short",
    "--maxfail=5",
    "--durations=10",
    "--html=test_reports/report.html",
    "--self-contained-html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
    "chaos: marks tests as chaos engineering tests",
    "property: marks tests as property-based tests",
    "benchmark: marks tests as benchmarking tests",
    "load: marks tests as load testing tests",
    "stress: marks tests as stress testing tests",
    "smoke: marks tests as smoke tests",
    "regression: marks tests as regression tests",
    "acceptance: marks tests as acceptance tests",
    "contract: marks tests as contract tests",
    "mutation: marks tests as mutation tests",
    "quality_gate: marks tests as quality gate tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/migrations/*",
    "*/settings/*",
]
branch = true
parallel = true
concurrency = ["multiprocessing", "thread"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "venv", "env"]
skips = ["B101", "B601"]

[tool.safety]
ignore = []
