# Continuous Deployment Workflow
# Deploys to staging and production environments

name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [completed]
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ steps.meta.outputs.version }}
            VCS_REF=${{ github.sha }}

      - name: Generate SBOM
        run: |
          python scripts/generate_sbom.py
          
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # In a real scenario, this would deploy to your staging infrastructure
          # Examples:
          # - kubectl apply -f k8s/staging/
          # - aws ecs update-service --cluster staging --service churn-predictor
          # - docker-compose -f docker-compose.staging.yml up -d
          
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"

      - name: Health check staging
        run: |
          # Wait for deployment to complete
          sleep 60
          
          # Health check (replace with actual staging URL)
          # curl -f https://staging.example.com/health
          echo "Staging health check passed"

      - name: Run smoke tests
        run: |
          # Run basic smoke tests against staging
          echo "Running smoke tests..."
          # pytest tests/smoke/ --base-url https://staging.example.com
          echo "Smoke tests passed"

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    environment: production
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Approve production deployment
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: admin,devops-team
          minimum-approvals: 2
          issue-title: "Deploy ${{ github.ref_name }} to production"
          issue-body: |
            Please review and approve the deployment of version ${{ github.ref_name }} to production.
            
            **Changes:**
            ${{ github.event.head_commit.message }}
            
            **Image:** ${{ needs.build-and-push.outputs.image-tag }}
            **Digest:** ${{ needs.build-and-push.outputs.image-digest }}

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Production deployment commands
          # kubectl apply -f k8s/production/
          # aws ecs update-service --cluster production --service churn-predictor
          
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"

      - name: Health check production
        run: |
          # Wait for deployment to complete
          sleep 120
          
          # Health check (replace with actual production URL)
          # curl -f https://api.example.com/health
          echo "Production health check passed"

      - name: Run production tests
        run: |
          # Run production validation tests
          echo "Running production validation..."
          # pytest tests/production/ --base-url https://api.example.com
          echo "Production validation passed"

      - name: Notify deployment success
        run: |
          echo "🚀 Successfully deployed ${{ github.ref_name }} to production!"
          # Send notifications (Slack, email, etc.)

  # Rollback capability
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    environment: production
    if: failure() && startsWith(github.ref, 'refs/tags/v')
    needs: [deploy-production]
    
    steps:
      - name: Rollback production deployment
        run: |
          echo "🔄 Rolling back production deployment..."
          # Rollback commands
          # kubectl rollout undo deployment/churn-predictor
          # aws ecs update-service --cluster production --service churn-predictor --task-definition previous-version
          
      - name: Verify rollback
        run: |
          # Verify rollback was successful
          echo "Verifying rollback..."
          # Health checks and validation
          
      - name: Notify rollback
        run: |
          echo "⚠️ Production deployment rolled back due to failure"
          # Send rollback notifications

  # Post-deployment monitoring
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: Monitor deployment
        run: |
          echo "📊 Monitoring deployment metrics..."
          
          # Monitor key metrics for 10 minutes
          for i in {1..10}; do
            echo "Monitoring iteration $i/10"
            
            # Check error rates, response times, etc.
            # curl -s https://api.example.com/metrics | grep error_rate
            
            sleep 60
          done
          
          echo "✅ Post-deployment monitoring completed successfully"

      - name: Update monitoring dashboards
        run: |
          echo "Updating monitoring dashboards with new deployment info..."
          # Update Grafana annotations, deployment markers, etc.

  # Generate deployment report
  deployment-report:
    name: Deployment Report
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Generate deployment report
        run: |
          echo "# Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Status" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Push | ${{ needs.build-and-push.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Staging | ${{ needs.deploy-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production | ${{ needs.deploy-production.result }} |" >> $GITHUB_STEP_SUMMARY