# Advanced PR Automation Configuration
# This file defines advanced pull request automation rules and workflows

# Auto-assignment rules
auto_assign:
  # Assign PR authors as reviewers for their own changes
  add_assignees: true
  
  # Assign reviewers based on file patterns
  reviewers:
    - pattern: "src/**/*.py"
      reviewers: ["@team/backend-engineers"]
    - pattern: "tests/**/*.py" 
      reviewers: ["@team/qa-engineers"]
    - pattern: "docs/**/*"
      reviewers: ["@team/tech-writers"]
    - pattern: ".github/**/*"
      reviewers: ["@team/devops-engineers"]
    - pattern: "Dockerfile*"
      reviewers: ["@team/devops-engineers"]

# Auto-labeling rules
auto_label:
  rules:
    - pattern: "src/**/*.py"
      labels: ["backend", "python"]
    - pattern: "tests/**/*.py"
      labels: ["tests", "qa"]
    - pattern: "docs/**/*"
      labels: ["documentation"]
    - pattern: ".github/**/*"
      labels: ["ci/cd", "automation"]
    - pattern: "requirements*.txt"
      labels: ["dependencies"]
    - pattern: "pyproject.toml"
      labels: ["dependencies", "configuration"]
    - pattern: "Dockerfile*"
      labels: ["docker", "deployment"]
    - pattern: "docker-compose*.yml"
      labels: ["docker", "deployment"]
    - pattern: "SECURITY.md"
      labels: ["security"]
    - pattern: "**/*security*"
      labels: ["security"]

# PR size analysis
size_analysis:
  small: 50      # Lines changed < 50
  medium: 250    # Lines changed < 250  
  large: 500     # Lines changed < 500
  x_large: 1000  # Lines changed >= 1000

# Auto-approval rules for trusted changes
auto_approve:
  # Auto-approve dependency updates from trusted bots
  dependabot_auto_approve:
    enabled: true
    patch_only: true  # Only auto-approve patch updates
    
  # Auto-approve documentation-only changes
  docs_only:
    enabled: true
    patterns:
      - "docs/**/*"
      - "*.md"
      - "mkdocs.yml"
    exclude_patterns:
      - "SECURITY.md"
      - "CHANGELOG.md"

# PR validation rules
validation:
  # Require status checks
  required_status_checks:
    - "ci/test"
    - "security/scan"
    - "quality/lint"
    
  # Branch protection
  branch_protection:
    enforce_admins: false
    require_code_owner_reviews: true
    required_approving_review_count: 2
    dismiss_stale_reviews: true
    
  # PR template enforcement
  template_enforcement:
    require_template: true
    sections:
      - "## Summary"
      - "## Test plan"
      - "## Checklist"

# Performance impact analysis
performance_analysis:
  # Trigger performance tests for these patterns
  trigger_patterns:
    - "src/api.py"
    - "src/**/*performance*"
    - "src/**/*cache*"
    - "requirements*.txt"
    
  # Benchmark comparison
  benchmark_comparison:
    enabled: true
    threshold_regression: 10  # Fail if performance regresses by > 10%
    
# Security analysis
security_analysis:
  # Trigger security scans for sensitive changes
  trigger_patterns:
    - "src/security.py"
    - "src/**/*auth*"
    - "requirements*.txt"
    - "Dockerfile*"
    - ".github/workflows/*"
    
  # Secret scanning
  secret_scanning:
    enabled: true
    block_on_detection: true
    
# Automated cleanup
cleanup:
  # Auto-delete head branches after merge
  delete_head_branch: true
  
  # Auto-update PR branches
  auto_update_branches: true
  
  # Cleanup stale PRs
  stale_pr_cleanup:
    enabled: true
    days_until_stale: 30
    days_until_close: 7
    
# Notification settings
notifications:
  # Slack integration
  slack:
    webhook_url: "${SLACK_WEBHOOK_URL}"
    channels:
      large_pr: "#code-review"
      security_alert: "#security"
      performance_regression: "#performance"
      
  # Email notifications
  email:
    security_alerts: ["security@company.com"]
    performance_alerts: ["performance@company.com"]

# Integration settings
integrations:
  # Code analysis tools
  sonarqube:
    enabled: true
    quality_gate: true
    
  # Security scanning
  snyk:
    enabled: true
    auto_fix_prs: true
    
  # Performance monitoring
  lighthouse_ci:
    enabled: false  # Not applicable for ML service
    
# Custom workflows
custom_workflows:
  # ML model validation
  ml_validation:
    trigger_patterns:
      - "src/train_model.py"
      - "src/predict_churn.py"
      - "models/**/*"
    validation_steps:
      - "model_performance_test"
      - "data_drift_detection"
      - "model_bias_analysis"
      
  # Data validation
  data_validation:
    trigger_patterns:
      - "src/preprocess_data.py"
      - "src/data_validation.py"
      - "data/**/*"
    validation_steps:
      - "schema_validation"
      - "data_quality_checks"
      - "privacy_compliance"