#!/usr/bin/env python3
"""
Generate comprehensive dependency lockfiles for reproducible builds.

This script creates locked requirement files that include all transitive dependencies
with exact versions for maximum reproducibility.
"""

import subprocess
import sys
import tempfile
import os
from pathlib import Path
from src.logging_config import get_logger

logger = get_logger(__name__)


def run_command(cmd, description="Running command"):
    """Run a shell command and return the output."""
    logger.info(f"{description}: {' '.join(cmd)}")
    try:
        result = subprocess.run(
            cmd, 
            capture_output=True, 
            text=True, 
            check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        logger.error(f"Error: {e}")
        logger.error(f"Stdout: {e.stdout}")
        logger.error(f"Stderr: {e.stderr}")
        raise


def generate_lockfile(requirements_file, output_file, description):
    """Generate a lockfile from a requirements file."""
    logger.info(f"\n=== Generating {description} ===")
    
    # Create a temporary virtual environment
    with tempfile.TemporaryDirectory() as temp_dir:
        venv_path = Path(temp_dir) / "venv"
        
        # Create virtual environment
        run_command([
            sys.executable, "-m", "venv", str(venv_path)
        ], "Creating virtual environment")
        
        # Determine pip path
        if os.name == 'nt':  # Windows
            pip_path = venv_path / "Scripts" / "pip"
            python_path = venv_path / "Scripts" / "python"
        else:  # Unix-like
            pip_path = venv_path / "bin" / "pip"
            python_path = venv_path / "bin" / "python"
        
        # Upgrade pip
        run_command([
            str(python_path), "-m", "pip", "install", "--upgrade", "pip"
        ], "Upgrading pip")
        
        # Install dependencies
        run_command([
            str(pip_path), "install", "-r", requirements_file
        ], f"Installing dependencies from {requirements_file}")
        
        # Generate freeze output
        freeze_output = run_command([
            str(pip_path), "freeze"
        ], "Generating freeze output")
        
        # Write to lockfile
        lockfile_content = f"""# Auto-generated lockfile for {requirements_file}
# Generated on: {subprocess.run(['date'], capture_output=True, text=True).stdout.strip()}
# Python version: {sys.version.split()[0]}
# 
# This file pins all dependencies (including transitive ones) to exact versions
# for maximum reproducibility. To update dependencies:
# 1. Update the main requirements file ({requirements_file})
# 2. Run: python generate_lockfile.py
# 3. Test thoroughly before committing changes
#
# DO NOT EDIT THIS FILE MANUALLY
# ================================================================

{freeze_output}
"""
        
        with open(output_file, 'w') as f:
            f.write(lockfile_content)
        
        logger.info(f"‚úÖ Generated {output_file}")
        
        # Show some statistics
        dependencies = [line for line in freeze_output.split('\n') if line and not line.startswith('#')]
        logger.info(f"üìä Total dependencies locked: {len(dependencies)}")


def main():
    """Main function to generate all lockfiles."""
    root_dir = Path(__file__).parent
    os.chdir(root_dir)
    
    logger.info("üîí Dependency Version Pinning Tool")
    logger.info("=" * 50)
    
    # Check if requirements files exist
    if not Path("requirements.txt").exists():
        logger.error("‚ùå Error: requirements.txt not found")
        return 1
    
    if not Path("requirements-dev.txt").exists():
        logger.error("‚ùå Error: requirements-dev.txt not found")
        return 1
    
    try:
        # Generate production lockfile
        generate_lockfile(
            "requirements.txt",
            "requirements.lock",
            "Production Dependencies Lockfile"
        )
        
        # Generate development lockfile
        generate_lockfile(
            "requirements-dev.txt", 
            "requirements-dev.lock",
            "Development Dependencies Lockfile"
        )
        
        logger.info("\nüéâ Lockfile generation completed successfully!")
        logger.info("\nNext steps:")
        logger.info("1. Review the generated .lock files")
        logger.info("2. Update CI/CD to use lockfiles for reproducible builds")
        logger.info("3. Document the lockfile update process in README")
        
        return 0
        
    except Exception as e:
        logger.error(f"\n‚ùå Error generating lockfiles: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())